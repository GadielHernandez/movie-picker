---
import GroupMembers from '../components/GroupMembers.astro';
import GroupStats from '../components/GroupStats.astro';
import GroupRank from '../components/GroupRank.astro';
import JoinGroupButton from '../components/JoinGroupButton';
import HeaderLayout from '../layouts/HeaderLayout.astro';
import { setUserSession } from '../lib/auth';
import { getGroup, getGroupMembers, addUserToGroup } from '../models/group/group.services';
import type { IProfile } from '../models/profile/profile.interfaces';

const userSession = await setUserSession(Astro.cookies);

const groupId = Astro.url.searchParams.get('id')
if (!groupId) {
    return Astro.redirect('/groups');
}

const group = await getGroup(parseInt(groupId))
if (!group) return Astro.redirect('/groups');

const members: IProfile[] = await getGroupMembers(parseInt(groupId))
let userInGroup = false;
if (userSession) 
    userInGroup = members.some((m) => m.id === userSession.id)

const add = Astro.url.searchParams.get('add')
if (userSession && add === 'true' && !userInGroup) {
    await addUserToGroup(userSession.id, parseInt(groupId))
    return Astro.redirect(`/group/?id=${groupId}`)
}
---

<HeaderLayout 
	title="Grupos" 
	description="Pagina para crear o sumarte a grupos de quiniela o predicciones de los ganadores de los Oscars 2024" 
	userSession={userSession}
>
	<main>
		<header class="flex flex-col py-32 gap-4">
            <div>
                <p class="text-xs text-white/50">
                    { group.members } miembros
                </p>
                <h1 class="text-4xl md:text-5xl font-light max-w-96 mt-6">
                    { group.name }
                </h1>
                <p class="text-sm md:text-base md:font-semibold mt-9 max-w-[850px] text-neutral-400">
                    { group.description }
                </p>
                <div class={`flex ${userInGroup && 'hidden'} mt-6`}>
                    <JoinGroupButton userId={userSession?.id} groupId={groupId} client:idle/>
                </div>
            </div>
        </header>


    {
        userInGroup
            ? 
                <ul class="flex flex-wrap text-sm font-medium text-center text-gray-500 dark:text-gray-400">
                    <li class="me-2 cursor-pointer tab">
                        <a class="inline-block px-4 py-3 rounded-full font-semibold text-xs md:text-base" >
                            Miembros
                        </a>
                    </li>
                    <li class="me-2 cursor-pointer tab">
                        <a class="inline-block px-4 py-3 rounded-full font-semibold text-xs md:text-base">
                            Posiciones
                        </a>
                    </li>
                    <li class="me-2 cursor-pointer tab">
                        <a class="inline-block px-4 py-3 rounded-full font-semibold text-xs md:text-base">
                            Estadisticas
                        </a>
                    </li>
                </ul>

                <section class="py-12 tab-sections transition-all ease-in-out duration-300">
                    <GroupMembers members={members} />
                </section>
                <section class="py-12 tab-sections transition-all ease-in-out duration-300">
                    <GroupRank />
                </section>
                <section class="py-12 tab-sections transition-all ease-in-out duration-300">
                    <GroupStats />
                </section>
            :
                <GroupMembers members={members} />
    }
	</main>
</HeaderLayout>

<script>
    const tabs = document.querySelectorAll('li.tab');
    const sections = document.querySelectorAll('section.tab-sections');
    const initalTab = tabs[0];

    function tabSelected(tab: Element, index: number){
        tabs.forEach((t) => {
            t.querySelector('a')?.classList.remove('bg-amber-500', 'text-white');
            t.querySelector('a')?.classList.add('hover:text-gray-900', 'hover:bg-gray-100', 'dark:hover:bg-amber-800/60', 'dark:hover:text-white');
        });

        const tabElement = tab as HTMLElement;
        tabElement.querySelector('a')?.classList.remove('hover:text-gray-900', 'hover:bg-gray-100', 'dark:hover:bg-amber-800/60', 'dark:hover:text-white');
        tabElement.querySelector('a')?.classList.add('bg-amber-500', 'text-white');

        sections.forEach((section, i) => {
            if (i === index) {
                section.classList.remove('hidden')

            }else
                section.classList.add('hidden');
        });
    }

    tabSelected(initalTab, 0)

    tabs.forEach((tab, index) => {
        tab.addEventListener('click', (e) => tabSelected(tab, index));
    });
</script>